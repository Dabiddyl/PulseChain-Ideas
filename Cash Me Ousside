// SPDX-License-Identifier: MIT

//
//░░░░░░░░░░░░░░░░░░░░░░█████████░░░░░░░░░    
//░░███████░░░░░░░░░░███▒▒▒▒▒▒▒▒███░░░░░░░
//░░█▒▒▒▒▒▒█░░░░░░░███▒▒▒▒▒▒▒▒▒▒▒▒▒███░░░░
//░░░█▒▒▒▒▒▒█░░░░██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██░░
//░░░░█▒▒▒▒▒█░░░██▒▒▒▒▒██▒▒▒▒▒▒██▒▒▒▒▒███░
//░░░░░█▒▒▒█░░░█▒▒▒▒▒▒████▒▒▒▒████▒▒▒▒▒▒██
//░░░█████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██
//░░░█▒▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒▒██
//░██▒▒▒▒▒▒▒▒▒▒▒▒▒█▒▒▒██▒▒▒▒▒▒▒▒▒▒██▒▒▒▒██
//██▒▒▒███████████▒▒▒▒▒██▒▒▒▒▒▒▒▒██▒▒▒▒▒██
//█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒████████▒▒▒▒▒▒▒██
//██▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██░
//░█▒▒▒███████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██░░░
//░██▒▒▒▒▒▒▒▒▒▒████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█░░░░░
//░░████████████░░░█████████████████░░░░░░

pragma solidity ^0.8.24;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

pragma solidity ^0.8.0;

interface IERC20 {
  
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

pragma solidity ^0.8.0;

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

pragma solidity ^0.8.14;

contract Ownable {
  address private _owner;

  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );

  constructor() {
    _owner = msg.sender;
    emit OwnershipTransferred(address(0), _owner);
  }

  function owner() public view returns(address) {
    return _owner;
  }

  modifier onlyOwner() {
    require(isOwner());
    _;
  }

  function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

  function isOwner() internal view returns(bool) {
    return msg.sender == _owner;
  }

  function transferOwnership(address newOwner) internal onlyOwner {
    _transferOwnership(newOwner);
  }

  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0));
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

pragma solidity ^0.8.0;

contract ERC20 is Context, IERC20, IERC20Metadata, Ownable {

    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;
    
    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
       _name = name_;
        _symbol = symbol_;
    
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, _msgSender(), currentAllowance - amount);

        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _update(address from, address to, uint256 value) internal virtual {
    if (from == address(0)) {
        _totalSupply += value;
    } else {
        uint256 fromBalance = _balances[from];
        require(fromBalance >= value, "Insufficient balance");
        unchecked {
            _balances[from] -= value;
        }
    }

    if (to == address(0)) {
        unchecked {
            _totalSupply -= value;
        }
    } else {
        unchecked {
            _balances[to] += value;
        }
    }

    emit Transfer(from, to, value);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

     function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        _balances[account] = accountBalance - amount;
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);

        return true;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

pragma solidity ^0.8.0;

library SafeMath {
 
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

pragma solidity ^0.8.0;

contract CashMeOusside is ERC20 {
    using SafeMath for uint256;

    // isRentrancyGuarded
    bool internal locked;

    // exemptions from tax/cooldown (not you).
    mapping (address => bool) private isExemptfromtax;
    mapping(address => mapping(uint256 => uint256)) private CollectorLocked;

	// TimeLock and Withdrawal calculations
    uint constant CollectorLockedTime = 20160 minutes; // 14 days *Maffs
    uint256 public constant withdrawThreshold = 20; // 20% threshold

    // Pertinent addresses
    address public immutable Burn = 0x0000000000000000000000000000000000000369;
    address private immutable pulsexV2DexAddy = 0x165C3410fC91EF562C50559f7d2289fEbed552d9;
    address private immutable Deployer = 0x01A5440db6Eb2d60E2221a84CdB90b1820216dC3;
    address private immutable pulsexV2Factory = 0x29eA7545DEf87022BAdc76323F373EA1e707C523;
    address private Collector;
    
    // ReentrancyGuard
    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }

    // Function to receive tokens
    receive() external payable noReentrant{   
    }

    // One-time setting on deplyment
    constructor(address Mwah) ERC20("Cash Me Ousside", "CMO") {
        // Exempt from tax
        isExemptfromtax[Burn] = true; // Burn address is exempt
        isExemptfromtax[pulsexV2DexAddy] = true; // Router address is exempt
        isExemptfromtax[Deployer] = true; // Contract owner is exempt
        isExemptfromtax[pulsexV2Factory] = true; // Factory address is exempt
        isExemptfromtax[Collector] = true; // Collector address is exempt
        
        // 180,000 maxtokens
        uint256 totalSupply = 180000 * (10**18); // Total supply of 18,000,000 with 18 decimals
        _mint(Mwah, totalSupply); // Mint initial tokens to the owner
        
        // Sets Collector address to this contract
        Collector = address(this);       
    }
    
    // Taxing yo ass .4% per EVERYTHING. Mwahamwa!!
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual override noReentrant{
        
        // Exempts network, contract, and deployer address(es) from taxes
        if (!isExemptfromtax[sender] && !isExemptfromtax[recipient]) {
            
            // Calculate tax using SafeMath
            uint256 tax = amount.mul(4).div(1000); 

            // Calculate half of the tax amount
            uint256 halfTax = tax.div(2); 
        
        // Transfer the amount minus the tax
        super._transfer(sender, recipient, amount - tax);       
        
        // Transfer half of the tax to the Collector
        super._transfer(sender, address(this), halfTax);
        
        // Burn the other half of the tax by transferring it to the burn address
        super._transfer(sender, address(Burn), halfTax);
        
        // Add the received amount to the Collector for time locking
        CollectorLocked[recipient][block.timestamp] = CollectorLocked[recipient][block.timestamp].add(amount);
    } else {
        
        // If sender or recipient is exempt, transfer without tax
        super._transfer(sender, recipient, amount);
    }
    }

    // Function for the deployer to withdraw 20% of accumulated tokens if threshold exceeded
    function withdrawTwentyPercent() external noReentrant {
        require(msg.sender == Deployer, "Only the deployer can withdraw tokens.");

        // Calculate the total accumulated tokens in the Collector
        uint256 totalTokens = balanceOf(Collector );
        uint256 twentyPercentThreshold = totalTokens.mul(withdrawThreshold).div(100);

        // Check if 20% or more of the total tokens exceed the CollectorLockedTime
        uint256 lockedTokens = 0;
        for (uint256 i = block.timestamp - CollectorLockedTime; i <= block.timestamp; i++) {
            lockedTokens = lockedTokens.add(CollectorLocked[Collector][i]);
        }

        // Double check
        require(lockedTokens >= twentyPercentThreshold, "Not yet, sucka!");

        // Transfer the tokens directly to the deployer wallet
        _transfer(Collector, Deployer, twentyPercentThreshold);
    }

    // Max withdraw of "other" token from contract to deployer address
    function emergencyWithdraw(address tokenAddress) external noReentrant {
    require(msg.sender == Deployer, "Only the deployer can withdraw tokens.");
    require(tokenAddress != address(this), "Cannot withdraw the main token using this function.");

    // Get the contract's balance of the specified token
    uint256 balance = IERC20(tokenAddress).balanceOf(address(this));

    // Transfer the entire balance of tokens to the deployer wallet
    IERC20(tokenAddress).transfer(Deployer, balance);
}
